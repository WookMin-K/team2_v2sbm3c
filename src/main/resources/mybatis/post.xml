<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dev.mvc.post.PostDAOInter">

  <!-- 등록 -->
  <insert id="create" parameterType="dev.mvc.post.PostVO">
    INSERT INTO post (
    post_no, title, content, user_no, created_day, view_cnt, notice_yn,
    image, image_org, image_type, image_size,
    files, file_org, file_type, file_size
    ) VALUES (
    post_seq.NEXTVAL, #{title}, #{content}, #{user_no}, SYSDATE, 0, #{notice_yn},
    #{image, jdbcType=VARCHAR}, #{image_org, jdbcType=VARCHAR}, #{image_type, jdbcType=VARCHAR}, #{image_size, jdbcType=INTEGER},
    #{files, jdbcType=VARCHAR}, #{file_org, jdbcType=VARCHAR}, #{file_type, jdbcType=VARCHAR}, #{file_size, jdbcType=INTEGER}
    )
  </insert>

  <select id="list" resultType="dev.mvc.post.PostVO">
    SELECT p.post_no, p.title, p.content, p.created_day,
    p.user_no, p.view_cnt, p.notice_yn,
    u.name
    FROM post p
    JOIN users u ON p.user_no = u.user_no
    ORDER BY p.notice_yn DESC, p.post_no DESC
  </select>


  <!-- 목록 페이징 -->
<!--  <select id="list_by_page" resultType="dev.mvc.post.PostVO" parameterType="Map">-->
<!--    SELECT * FROM (-->
<!--    SELECT-->
<!--    ROW_NUMBER() OVER (ORDER BY p.notice_yn DESC, p.post_no DESC) AS rnum,-->
<!--    p.post_no, p.title, p.content, p.created_day,-->
<!--    p.user_no, p.view_cnt, p.notice_yn,-->
<!--    u.name-->
<!--    FROM post p-->
<!--    JOIN users u ON p.user_no = u.user_no-->
<!--    )-->
<!--    WHERE rnum BETWEEN #{start} AND #{end}-->
<!--  </select>-->


  <!-- 상세 조회 -->
  <select id="read" parameterType="int" resultType="dev.mvc.post.PostVO">
    SELECT
    p.post_no,
    p.title,
    p.content,
    p.created_day,
    p.user_no,
    p.view_cnt,
    p.notice_yn,
    p.image,
    p.image_org,
    p.image_type,
    p.image_size,
    p.files,
    p.file_org,
    p.file_type,
    p.file_size,
    p.hidden_yn,
    u.name
    FROM post p
    JOIN users u ON p.user_no = u.user_no
    WHERE p.post_no = #{post_no}
  </select>



  <select id="getOriginalFileName" resultType="String" parameterType="String">
    SELECT file_org FROM post WHERE files = #{savedFileName}
  </select>
  
  <!-- 수정 -->
  <update id="update" parameterType="dev.mvc.post.PostVO">
    UPDATE post SET
    title = #{title},
    content = #{content},
    image = #{image, jdbcType=VARCHAR},
    image_org = #{image_org, jdbcType=VARCHAR},
    image_type = #{image_type, jdbcType=VARCHAR},
    image_size = #{image_size, jdbcType=NUMERIC},
    files = #{files, jdbcType=VARCHAR},
    file_org = #{file_org, jdbcType=VARCHAR},
    file_type = #{file_type, jdbcType=VARCHAR},
    file_size = #{file_size, jdbcType=NUMERIC},
    notice_yn = #{notice_yn}
    WHERE post_no = #{post_no}
  </update>

  <!-- 이미지 수정 -->
  <update id="update_image" parameterType="dev.mvc.post.PostVO">
    UPDATE post
    SET
    image = #{image, jdbcType=VARCHAR},
    image_org = #{image_org, jdbcType=VARCHAR},
    image_type = #{image_type, jdbcType=VARCHAR},
    image_size = #{image_size, jdbcType=NUMERIC}
    WHERE post_no = #{post_no}
  </update>

  <!-- 파일 수정 -->
  <update id="update_file" parameterType="dev.mvc.post.PostVO">
    UPDATE post
    SET
    files = #{files, jdbcType=VARCHAR},
    file_org = #{file_org, jdbcType=VARCHAR},
    file_type = #{file_type, jdbcType=VARCHAR},
    file_size = #{file_size, jdbcType=NUMERIC}
    WHERE post_no = #{post_no}
  </update>

  <!-- 삭제 -->
  <delete id="delete" parameterType="int">
    DELETE FROM post
    WHERE post_no = #{post_no}
  </delete>

  <!-- 조회수 증가 -->
  <update id="increaseViewCnt" parameterType="int">
    UPDATE post SET view_cnt = view_cnt + 1 WHERE post_no = #{post_no}
  </update>

  <!-- 전체 게시글 수 (페이징용) -->
  <select id="list_count" resultType="int">
    SELECT COUNT(*) FROM post
  </select>

  <!-- 검색 + 페이징 -->
  <select id="search_by_page" resultType="dev.mvc.post.PostVO" parameterType="map">
    SELECT p.*, u.name
    FROM (
    SELECT ROWNUM AS rnum, a.*
    FROM (
    SELECT * FROM post
    <where>
      <choose>
        <when test="type == 'title'">
          title LIKE #{keyword}
        </when>
        <when test="type == 'content'">
          content LIKE #{keyword}
        </when>
        <otherwise>
          title LIKE #{keyword} OR content LIKE #{keyword}
        </otherwise>
      </choose>

    </where>
    ORDER BY
     CASE WHEN notice_yn = 'Y' THEN 0 ELSE 1 END,  <!-- 고정글 먼저 -->
     post_no DESC
    ) a
    WHERE ROWNUM &lt;= #{end}
    ) p
    JOIN users u ON p.user_no = u.user_no
    WHERE rnum &gt;= #{start}
  </select>

  <!-- 검색 결과 총 게시글 수 -->
  <select id="search_count" resultType="int" parameterType="map">
    SELECT COUNT(*) FROM post
    WHERE
    <choose>
      <when test="type == 'title'">
        title LIKE #{keyword}
      </when>
      <when test="type == 'content'">
        content LIKE #{keyword}
      </when>
      <otherwise>
        title LIKE #{keyword} OR content LIKE #{keyword}
      </otherwise>
    </choose>
  </select>

  <!-- 이전글  -->
  <select id="readPrev" parameterType="int" resultType="dev.mvc.post.PostVO">
    SELECT *
    FROM post
    WHERE post_no &lt; #{post_no}
    ORDER BY post_no DESC
    FETCH FIRST 1 ROWS ONLY
  </select>

  <!-- 다음글 -->
  <select id="readNext" parameterType="int" resultType="dev.mvc.post.PostVO">
    SELECT *
    FROM post
    WHERE post_no > #{post_no}
    ORDER BY post_no ASC
    FETCH FIRST 1 ROWS ONLY
  </select>
  
    <!-- 내가 쓴 글 목록 페이징 -->
  <select id="listByUser" parameterType="map" resultType="dev.mvc.post.PostVO">
    SELECT 
      p.post_no,
      p.title,
      p.content,
      p.created_day,
      p.user_no,
      p.view_cnt,
      p.notice_yn,
      u.name            AS name       <!-- users.name 추가 -->
    FROM (
      SELECT 
        ROW_NUMBER() OVER (ORDER BY notice_yn DESC, post_no DESC) AS rnum,
        p.*
      FROM post p
      WHERE p.user_no = #{userNo}
    ) p
    JOIN users u 
      ON p.user_no = u.user_no
    WHERE p.rnum BETWEEN #{start} AND #{end}
  </select>

  <!-- 내가 쓴 글 전체 건수 -->
  <select id="countByUser" parameterType="int" resultType="int">
    SELECT COUNT(*)
      FROM post
     WHERE user_no = #{userNo}
  </select>
  
  <!-- 내가 쓴 글 + 검색 + 페이징 -->
<select id="searchMyByPage" parameterType="map" resultType="dev.mvc.post.PostVO">
  SELECT p.post_no,
         p.title,
         p.created_day,
         p.view_cnt,
         p.notice_yn,
         u.name
    FROM (
      SELECT
        ROW_NUMBER() OVER (ORDER BY notice_yn DESC, post_no DESC) AS rnum,
        p.*           <!-- post p 로 alias -->
      FROM post p
      <where>
        user_no = #{userNo}
        <if test="type == 'title'">
          AND title   LIKE #{keyword}
        </if>
        <if test="type == 'content'">
          AND content LIKE #{keyword}
        </if>
        <if test="type == 'all'">
          AND (title LIKE #{keyword} OR content LIKE #{keyword})
        </if>
      </where>
    ) p
  JOIN users u
    ON p.user_no = u.user_no
  WHERE p.rnum BETWEEN #{start} AND #{end}
</select>

<select id="searchMyCount" parameterType="map" resultType="int">
  SELECT COUNT(*) FROM post
   WHERE user_no = #{userNo}
     <if test="type=='title'">
       AND title LIKE #{keyword}
     </if>
     <if test="type=='content'">
       AND content LIKE #{keyword}
     </if>
     <if test="type=='all'">
       AND (title LIKE #{keyword} OR content LIKE #{keyword})
     </if>
</select>


  <update id="updateHiddenYn" parameterType="map">
    UPDATE post
      SET hidden_yn = #{hiddenYn}
    WHERE post_no = #{postNo}
  </update>

</mapper>
